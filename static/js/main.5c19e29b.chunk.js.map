{"version":3,"sources":["Button/Button.js","App.js","reportWebVitals.js","index.js","Button/Button.module.css"],"names":["button","className","classes","Footer","Button","onClick","this","props","clicked","style","backgroundColor","href","Twitt","class","Tmbl","Component","App","state","quote","author","onClickHandler","event","fetch","then","response","json","data","setState","content","Math","random","toString","slice","catch","error","message","color","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","application","StrictMode","basename","ReactDOM","render","document","getElementById","module","exports"],"mappings":"sRAkBeA,E,4JAdX,WACI,OACI,sBAAKC,UAAWC,IAAQC,OAAxB,UACA,wBAAQF,UAAWC,IAAQE,OAC3BC,QAASC,KAAKC,MAAMC,QACpBC,MAAO,CAACC,gBAAiBJ,KAAKC,MAAME,OAFpC,uBAIA,mBAAGE,KAAK,2BAA2BV,UAAWC,IAAQU,MAAOH,MAAO,CAACC,gBAAiBJ,KAAKC,MAAME,OAAjG,SAAyG,mBAAGI,MAAM,qBAClH,mBAAGF,KAAK,0BAA0BV,UAAWC,IAAQY,KAAML,MAAO,CAACC,gBAAiBJ,KAAKC,MAAME,OAA/F,SAAuG,mBAAGI,MAAM,2B,GATvGE,aCsCNC,E,4MAnCbC,MAAQ,CACNC,MAAO,2DACPC,OAAQ,YACRT,gBAAiB,W,EAInBU,eAAiB,SAACC,GAChBC,MAAM,kCACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACL,EAAKC,SAAS,CAACT,MAAOQ,EAAKE,QAAST,OAAQ,KAAOO,EAAKP,OAAQT,gBAAiB,IAAMmB,KAAKC,SAASC,SAAS,IAAIC,MAAM,EAAE,QACzHC,OAAM,SAAAC,GACP,OAAOA,EAAMC,Y,4CAKhB,WACE,OAEE,sBAAKlC,UAAU,MAAf,UACA,gCAAQ,0BAA4BK,KAAKW,MAAMP,gBAAiB,OAC9D,qBAAIT,UAAU,KAAKQ,MAAO,CAAC2B,MAAO9B,KAAKW,MAAMP,iBAA7C,UACE,mBAAGT,UAAU,uBAA0BK,KAAKW,MAAMC,SAEpD,oBAAIjB,UAAU,KAAKQ,MAAO,CAAC2B,MAAO9B,KAAKW,MAAMP,iBAA7C,SAAgEJ,KAAKW,MAAME,SAC3E,cAACf,EAAD,CAAQI,QAASF,KAAKc,eAAgBX,MAAOH,KAAKW,MAAMP,yB,GA5B9CK,aCOHsB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCARO,EACN,cAAC,IAAMC,WAAP,UACG,cAAC,IAAD,CAAQC,SAAS,iBAAjB,SACC,cAAC,EAAD,QAIJC,IAASC,OACPJ,EACAK,SAASC,eAAe,SAM1Bd,K,kBCrBAe,EAAOC,QAAU,CAAC,OAAS,uBAAuB,OAAS,uBAAuB,MAAQ,sBAAsB,KAAO,wB","file":"static/js/main.5c19e29b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport classes from './Button.module.css'\n\nclass button extends Component{\n    render(){\n        return(\n            <div className={classes.Footer}>\n            <button className={classes.Button}\n            onClick={this.props.clicked}\n            style={{backgroundColor: this.props.style}}\n            >New Quote</button>\n            <a href=\"https://twitter.com/home\" className={classes.Twitt} style={{backgroundColor: this.props.style}}><i class=\"fab fa-twitter\"></i></a>\n            <a href=\"https://www.tumblr.com/\" className={classes.Tmbl} style={{backgroundColor: this.props.style}}><i class=\"fab fa-tumblr\"></i></a>\n            </div>\n        )\n    }\n}\n\nexport default button;","import { Component } from \"react\";\n\nimport \"./App.css\";\nimport Button from \"./Button/Button\";\n\nclass App extends Component {\n  state = {\n    quote: \"Can you imagine what I would do if I could do all I can?\",\n    author: \"- Sun Tzu\",\n    backgroundColor: '#FF6633'\n  };\n\n\n  onClickHandler = (event) => {\n    fetch('https://api.quotable.io/random')\n    .then(response => response.json())\n    .then(data => {\n     this.setState({quote: data.content, author: \"- \" + data.author, backgroundColor: '#' + Math.random().toString(16).slice(2,8)}) \n   }).catch(error => {\n     return error.message\n    })\n}; \n\n\n  render() {\n    return (\n      \n      <div className=\"app\">\n      <style>{'body{background-color: ' + this.state.backgroundColor +';}'}</style>\n        <h1 className=\"h1\" style={{color: this.state.backgroundColor}}>\n          <i className=\"fas fa-quote-right\"></i>{this.state.quote}\n        </h1>\n        <h6 className=\"h6\" style={{color: this.state.backgroundColor}}>{this.state.author}</h6>\n        <Button clicked={this.onClickHandler} style={this.state.backgroundColor}/>\n      </div>\n      \n      \n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport './index.css'\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst application = \n<React.StrictMode>\n   <Router basename='/random-quotes'> \n    <App />\n    </Router>\n  </React.StrictMode>;\n\nReactDOM.render(\n  application,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Footer\":\"Button_Footer__1RLlj\",\"Button\":\"Button_Button__1Isrx\",\"Twitt\":\"Button_Twitt__3hTDB\",\"Tmbl\":\"Button_Tmbl__fdRRD\"};"],"sourceRoot":""}